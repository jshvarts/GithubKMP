// The iOS platform is wrapped in Kotlin/Native in a platform package
// For Android to get Android OS version, we need to declare this module of type "com.android.library"

apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 21
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('shared')
            }
        }

        fromPreset(presets.android, 'android')
    }

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'
            implementation "io.ktor:ktor-client-core:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
        }

        androidMain.dependencies {
            // android versions of the common libraries
            api 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation "io.ktor:ktor-client-android:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"
        }

        iosMain.dependencies {
            // we don't need to add stdlib since Kotlin/Native will include the stdlib when compiling code for iOS
            implementation "io.ktor:ktor-client-ios:$ktor_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlinx_coroutines_version"
        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    // set directory for the Framework and determine correct Framework to build
    // based on target configuration selected in the XCode project (default is 'DEBUG')

    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("shared", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    // copy file from build dir into Framework dir
    from { framework.outputFile.parentFile }
    into frameworkDir

    // Create bash script in Framework dir--XCode will call it to build the shared Framework.
    // the script uses JDK version embedded into Android Studio
    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

// XCode should compile the Framework before the build
tasks.build.dependsOn packForXCode

